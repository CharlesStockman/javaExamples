package com.example.SpringSecuirty.controller;

import com.example.SpringSecuirty.dto.Student;
import jakarta.servlet.http.HttpServletRequest;
import org.springframework.security.web.csrf.CsrfToken;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RestController;

import java.util.ArrayList;
import java.util.List;

// Cross-Site Request Forgery (CRSF)
//      When sending a request from the Client ot the Server for the first time the user/password must be sent and the client receives a session id
//      For following requests the session id will be sent to the server to get access to resources.
//          Advantage: Keeps you log in Disadvantage: Get a session id from a malicious site which gets your session id that it can send to the server you are logged into.
//      Cross Site (Session id is being used on another site) and Request Forgery (Using a session id that is not yours)
//      Fixes
//          Create a new session id every time.
//          Every time a page is generated by the server, there would be a hidden field called _CRSF (tab input type hidden)
//      Get now allowed to be protected
//      In postman : In the Headers Set the X-CSRF-TOKEN
//

@RestController
public class StudentController {

    private List<Student> students = new ArrayList<>(List.of(
        new Student(1, "Charles Stockman", 91),
        new Student(2, "Sharon Stockman", 78 )
    ));

    @GetMapping("/students")
    public List<Student> getStudents() {
        return students;
    }

    @PostMapping("/students")
    public void addStudent(@RequestBody Student student ) {
        students.add(student);
    }

    @GetMapping("/csrf-token")
    public CsrfToken getCrsftoken(HttpServletRequest request) {
        return (CsrfToken) request.getAttribute("_csrf");

    }
}
